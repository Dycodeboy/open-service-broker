apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: redis
  namespace: {{SERVICE_ID}}
  labels:
    service_id: {{SERVICE_ID}}
    service_type: redis
    space: {{SPACE_ID}}
    org: {{ORG_ID}}
    plan: {{PLAN_ID}}
    version: {{REDIS_VERSION}}
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  minReadySeconds: 40
  progressDeadlineSeconds: 600
  selector:
    matchLabels:
     service_type: redis
  template:
    metadata:
      labels:
        service_id: {{SERVICE_ID}}
        service_type: redis
        space: {{SPACE_ID}}
        org: {{ORG_ID}}
        version: {{REDIS_VERSION}}
        instances: redis
        role: none
      annotations:
        appcloud.swisscom.com/disk-quota: 1Gi
#        creation_date: <date>
#        image_build: <redis-build-id>
#        image_commit: <git commit id>
#        pod.beta.kubernetes.io/initialized: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: failure-domain.beta.kubernetes.io/zone
            namespaces:
            - {{SERVICE_ID}}
            labelSelector:
              matchExpressions:
              - key: service_type
                operator: In
                values:
                - redis
          - topologyKey: kubernetes.io/hostname
            namespaces:
            - {{SERVICE_ID}}
            labelSelector:
              matchExpressions:
              - key: service_type
                operator: In
                values:
                - sentinel
                - operator
      initContainers:
      - name: fix-perm
        image: "{{REDIS_ROOT_IMAGE}}"
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - "-c"
        - chown -R 10000:10000 /data/work
        volumeMounts:
        - name: data
          mountPath: "/data/work"
      - name: init
        image: "{{REDIS_IMAGE}}"
        imagePullPolicy: IfNotPresent
        command:
        - "/data/service/init_redis.sh"
        args:
        - main
        env:
        - name: SERVICE_GUID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: MASTER_NAME
          value: "{{SERVICE_ID}}"
        - name: REDIS_PASS
          value: "{{REDIS_PASS}}"
        - name: MAX_DATABASES
          value: "{{MAX_DATABASES}}"
        - name: MAX_CONNECTIONS
          value: "{{MAX_CONNECTIONS}}"
        - name: MAX_MEMORY
          value: "{{REDIS_SERVER_MAX_MEMORY}}mb"
        - name: MIN_SLAVES
          value: "1"
        - name: REPL_BACKLOG_SIZE
          value: 16mb
        - name: SLAVEOF_COMMAND
          value: "{{SLAVEOF_COMMAND}}"
        - name: CONFIG_COMMAND
          value: "{{CONFIG_COMMAND}}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: data
          mountPath: "/data/work"
      - name: fix-init
        image: {{REDIS_IMAGE}}
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - "-c"
        - touch /data/work/initialized
        securityContext:
          runAsNonRoot: true
        volumeMounts:
        - name: data
          mountPath: "/data/work"
      containers:
      - name: redis
        image: {{REDIS_IMAGE}}
        imagePullPolicy: IfNotPresent
      # can be enabled after k8s init containers work properly
      #  command:
      #  - /usr/local/bin/redis-server
      #  args:
      #  - /data/work/redis/config/redis.conf
      # can be removed after k8s init contiainer work properly
        command:
        - "/data/service/init_redis.sh"
        args:
        - main
        - run
      # >> until here
      # can be removed after k8s init contiainer work properly
        env:
        - name: SERVICE_GUID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: MASTER_NAME
          value: "{{SERVICE_ID}}"
        - name: REDIS_PASS
          value: "{{REDIS_PASS}}"
        - name: MAX_DATABASES
          value: "{{MAX_DATABASES}}"
        - name: MAX_CONNECTIONS
          value: "{{MAX_CONNECTIONS}}"
        - name: MAX_MEMORY
          value: "{{REDIS_SERVER_MAX_MEMORY}}mb"
        - name: MIN_SLAVES
          value: "1"
        - name: REPL_BACKLOG_SIZE
          value: 16mb
        - name: SLAVEOF_COMMAND
          value: "{{SLAVEOF_COMMAND}}"
        - name: CONFIG_COMMAND
          value: "{{CONFIG_COMMAND}}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      # >> until here
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        resources:
          limits:
            cpu: {{REDIS_MAX_CPU}}m
            memory: {{REDIS_MAX_MEMORY}}Mi
          requests:
            cpu: {{REDIS_MAX_CPU}}m
            memory: {{REDIS_MAX_MEMORY}}Mi
        lifecycle:
          preStop:
            exec:
              command:
              - /usr/local/bin/redis-cli
              - -a
              - {{REDIS_PASS}}
              - shutdown
        readinessProbe:
          exec:
            command:
            - /usr/local/bin/redis-cli
            - -a
            - {{REDIS_PASS}}
            - ping
          initialDelaySeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/redis-cli
            - -a
            - {{REDIS_PASS}}
            - ping
          initialDelaySeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          # with this option, the deployment cant start
          # runAsUser: 10000
        terminationMessagePath: /data/work/logs/redis_termination.log
        volumeMounts:
        - name: data
          mountPath: /data/work
#      - name: telegraf
#        image: {{TELEGRAF_IMAGE}}
#        imagePullPolicy: Always
#        command:
#        - telegraf
#        args:
#        - "-config"
#        - /etc/telegraf/service/service.conf
#        resources:
#          requests:
#            cpu: 50m
#            memory: 32Mi
#          limits:
#            cpu: 50m
#            memory: 32Mi
#        env:
#        - name: SERVICE_GUID
#          valueFrom:
#            fieldRef:
#              apiVersion: v1
#              fieldPath: metadata.namespace
#        - name: MASTER_NAME
#          valueFrom:
#            fieldRef:
#              apiVersion: v1
#              fieldPath: metadata.namespace
#        - name: REDIS_PASS
#          value: {{REDIS_PASS}}
#        securityContext:
#          runAsNonRoot: true
#        terminationMessagePath: /data/work/logs/telegraf_termination.log
#        volumeMounts:
#        - name: telegraf-config
#          mountPath: /etc/telegraf/service
#      - name: shield
#        image: {{REDIS_SHIELD_IMAGE}}
#        imagePullPolicy: IfNotPresent
#        env:
#        - name: REDIS_PASS
#          value: "{{REDIS_PASS}}"
#        - name: AUTHORIZED_KEYS
#          value: "{{SHIELD_AUTHORIZED_KEYS}}"
#        ports:
#        - containerPort: 2222
#          name: shield-ssh
#          protocol: TCP
#        resources:
#          limits:
#            cpu: 1000m
#            memory: 512Mi
#          requests:
#            cpu: 1000m
#            memory: 512Mi
#        securityContext:
#          runAsNonRoot: true
#          # with this option, the deployment cant start
#          # runAsUser: 10000
#        terminationMessagePath: /data/work/logs/shield_terminision.log
      volumes:
#      - name: telegraf-config
#        configMap:
#          name: telegraf-config
#          items:
#          - key: telegraf.config
#            path: service.conf
      - name: data
        hostPath:
          path: /var/vcap/store/container_data/{{SERVICE_ID}}/redis/redis
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
#      securityContext:
#        runAsNonRoot: true
